/home/snake/catkin_ws/src/depth_to_line_extraction#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <sensor_msgs/LaserScan.h>
#include "sensor_msgs/Imu.h"
#include <tf/transform_broadcaster.h>
#include <geometry_msgs/Quaternion.h>

static const std::string OPENCV_WINDOW = "Input window";

void IMUCallback(const sensor_msgs::Imu::ConstPtr& msg)
{
  ROS_INFO("Imu Seq: [%d]", msg->header.seq);
  ROS_INFO("Imu Orientation x: [%f], y: [%f], z: [%f], w: [%f]", msg->orientation.x,msg->orientation.y,msg->orientation.z,msg->orientation.w);
}

class depth_to_line_extraction
{
  ros::NodeHandle nh_;
  image_transport::ImageTransport it_;
  image_transport::Subscriber image_sub_;
  ros::Publisher Vscan_pub;
  ros::Publisher Hscan_pub;
  ros::Subscriber IMUsub;
  unsigned int Vnum_readings;
  unsigned int Hnum_readings;
  double laser_frequency;
  tf::TransformBroadcaster broadcaster;

public:
  depth_to_line_extraction()
    : it_(nh_)
  {
    // Subscrive to input video feed and publish output video feed
    image_sub_ = it_.subscribe("/image_raw", 1, 
      &depth_to_line_extraction::imageCb, this);
    Vscan_pub = nh_.advertise<sensor_msgs::LaserScan>("Hscan", 1);
    Hscan_pub = nh_.advertise<sensor_msgs::LaserScan>("Vscan", 1);
    IMUsub = nh_.subscribe("imu_data", 1, IMUCallback);
   
    laser_frequency = 40;
    cv::namedWindow(OPENCV_WINDOW);
  }

  ~depth_to_line_extraction()
  {
    cv::destroyWindow(OPENCV_WINDOW);
  }


  void imageCb(const sensor_msgs::ImageConstPtr& msg)
  {
    cv_bridge::CvImagePtr cv_ptr;
    try
    {
      cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("cv_bridge exception: %s", e.what());
      return;
    }
    // Update GUI Window
  

   cv::Mat input_img;
   
   cv::cvtColor(cv::imread("/home/snake/Desktop/depth0100.png"), input_img, CV_RGB2GRAY);
  
 
   Vnum_readings = input_img.rows;
   Hnum_readings = input_img.cols;

   
   ros::Time scan_time = ros::Time::now();
   sensor_msgs::LaserScan Vscan;
   Vscan.header.stamp = scan_time;
   Vscan.header.frame_id = "Vlaser_frame";
   Vscan.angle_min = -1.57/2;
   Vscan.angle_max = 1.57/2;
   Vscan.angle_increment = (3.14/4) / Vnum_readings;
   Vscan.time_increment = (1 / laser_frequency) / (Vnum_readings);
   Vscan.range_min = 0.0;
   Vscan.range_max = 255.0;
   Vscan.ranges.resize((int)(input_img.cols));
  
   
   sensor_msgs::LaserScan Hscan;
   Hscan.header.stamp = scan_time;
   Hscan.header.frame_id = "Hlaser_frame";
   Hscan.angle_min =-0.94+0.7;
   Hscan.angle_max = 0.94-0.7;
   Hscan.angle_increment = (50*3.4/180) / Hnum_readings;
   Hscan.time_increment = (1 / laser_frequency) / (Hnum_readings);
   Hscan.range_min = 0.0;
   Hscan.range_max = 255.0;
   Hscan.ranges.resize((int)(input_img.rows));
  
   int y=Vnum_readings/2; //get y value from imu need to calibrate
   for( int x = 0; x <input_img.cols; x++){
      Vscan.ranges[input_img.cols-x] = 255-input_img.at<uchar>(y, x);
input_img.at<uchar>(y, x)=255;
      //Vscan.intensities[i] = Vintensities[i];
   }
 
   int x=Hnum_readings/2; //get y value from imu need to calibrate
   for(unsigned int y = 0; y < Vnum_readings; ++y){
      Hscan.ranges[y] = 255-input_img.at<uchar>(y, x);
input_img.at<uchar>(y, x)=255;
      //Vscan.intensities[i] = Vintensities[i];
   }
   Vscan_pub.publish(Vscan);
   Hscan_pub.publish(Hscan);

   tf::Quaternion qut=tf::createQuaternionFromRPY(3.14/2, 0, 0);
   broadcaster.sendTransform(
      tf::StampedTransform(
        tf::Transform(qut, tf::Vector3(0, 0.0, 0)),
        ros::Time::now(),"Hlaser_frame", "Vlaser_frame"));
 cv::imshow(OPENCV_WINDOW, input_img);
   cv::waitKey(1);
  }
};

int main(int argc, char** argv)
{
  ros::init(argc, argv, "depth_to_line_extraction");
  depth_to_line_extraction dtle;
  ros::spin();
  return 0;
}
